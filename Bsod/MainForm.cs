using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Bsod {
  
  public partial class MainForm : Form {
    
    #region Preview API's

    [DllImport("user32.dll")]
    static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);

    [DllImport("user32.dll")]
    static extern int SetWindowLong(IntPtr hWnd, int nIndex, IntPtr dwNewLong);

    [DllImport("user32.dll", SetLastError = true)]
    static extern int GetWindowLong(IntPtr hWnd, int nIndex);

    [DllImport("user32.dll")]
    static extern bool GetClientRect(IntPtr hWnd, out Rectangle lpRect);

    #endregion

    readonly bool isPreviewMode;

    #region Constructors

    public MainForm() {
      InitializeComponent();
      StartPosition = FormStartPosition.Manual;
    }

    //This constructor is passed the bounds this form is to show in
    //It is used when in normal mode
    public MainForm(Rectangle bounds) : this() {
      this.Bounds = bounds;
      //hide the cursor
      Cursor.Hide();
    }

    //This constructor is the handle to the select screen saver dialog preview window
    //It is used when in preview mode (/p)
    public MainForm(IntPtr previewHandle) : this() {
      //set the preview window as the parent of this window
      SetParent(Handle, previewHandle);

      //make this a child window, so when the select screen saver dialog closes, this will also close
      SetWindowLong(Handle, -16, new IntPtr(GetWindowLong(Handle, -16) | 0x40000000));

      //set our window's size to the size of our window's new parent
      Rectangle parentRect;
      GetClientRect(previewHandle, out parentRect);
      Size = parentRect.Size;

      //set our location at (0, 0)
      Location = new Point(0, 0);

      isPreviewMode = true;
    }

    #endregion

    #region GUI

    //sets up the fake BSOD
    private void MainForm_Shown(object sender, EventArgs e) {
      if (!isPreviewMode) //we don't want all those effects for just a preview
      {
        Refresh();
        //keep the screen black for one second to simulate the changing of screen resolution
        System.Threading.Thread.Sleep(1000);
      }

      //change the back color to a lovely BSOD blue
      BackColor = Color.FromArgb(0, 0, 130);
      //make the background image a fake BSOD generated by the GenerateBSOD() method.
      //the image is only 640x480, but it will be streatched to fit the whole screen like a real BSOD.
      BackgroundImage = GenerateBsod();
    }

    //generates a BSOD bitmap with a random error and a random file name gathered from the "Errors" class
    private Bitmap GenerateBsod() {
      //create the bitmap and graphics
      var bsod = new Bitmap(640, 480);
      var bsodGraphics = Graphics.FromImage(bsod);
      //make the image BSOD blue
      bsodGraphics.FillRectangle(new SolidBrush(Color.FromArgb(0, 0, 130)), new Rectangle(0, 0, 640, 480));
      //create the BSOD text
      var error = Errors.GetRandomError();
      var file = Errors.GetRandomFile();
      var bsodText = "\r\n" + BSODBodyText.Header + " " + file + "\r\n\r\n" + error + "\r\n\r\n" + BSODBodyText.Middle +
                     file + BSODBodyText.End;
      //turn off any text smoothing (text smoothing would make it look really fake)
      bsodGraphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.SingleBitPerPixelGridFit;
      //draw the text (FYI Lucida Console is the font used in real BSOD's)
      bsodGraphics.DrawString(bsodText, new Font("Lucida Console", 10, FontStyle.Regular), Brushes.White,
        new PointF(0, 0));
      //we are done with BSODGraphics
      bsodGraphics.Dispose();
      //create a new image the size of the window and some graphics for it
      var scaled = new Bitmap(Width, Height);
      var scaledGraphics = Graphics.FromImage(scaled);
      if (isPreviewMode) {
        //we want high quality resizing for preview so it will actually show up clearly
        scaledGraphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
      }
      else {
        //we want low quality resizing for full screen to make it more authentic
        scaledGraphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.Low;
      }

      //draw the BSOD image on the Scaled image so that it is enlarged
      scaledGraphics.DrawImage(bsod, new Rectangle(0, 0, Width, Height));
      return scaled;
    }

    #endregion

    #region User Input

    private void MainForm_KeyDown(object sender, KeyEventArgs e) {
      if (!isPreviewMode) //disable exit functions for preview
      {
        Application.Exit();
      }
    }

    private void MainForm_Click(object sender, EventArgs e) {
      if (!isPreviewMode) //disable exit functions for preview
      {
        Application.Exit();
      }
    }

    //start off OriginalLoction with an X and Y of int.MaxValue, because
    //it is impossible for the cursor to be at that position. That way, we
    //know if this variable has been set yet.
    Point originalLocation = new Point(int.MaxValue, int.MaxValue);

    private void MainForm_MouseMove(object sender, MouseEventArgs e) {
      if (!isPreviewMode) //disable exit functions for preview
      {
        //see if originallocat5ion has been set
        if (originalLocation.X == int.MaxValue & originalLocation.Y == int.MaxValue) {
          originalLocation = e.Location;
        }

        //see if the mouse has moved more than 20 pixels in any direction. If it has, close the application.
        if (Math.Abs(e.X - originalLocation.X) > 20 | Math.Abs(e.Y - originalLocation.Y) > 20) {
          Application.Exit();
        }
      }
    }

    #endregion
  }
}